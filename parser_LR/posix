		$accept -> program TK_DOLAR,
		program -> linebreak complete_commands linebreak,
		program -> linebreak,
		complete_commands -> complete_commands newline_list complete_command,
		complete_commands -> complete_command,
		complete_command -> list separator_op,
		complete_command -> list,
		list -> list separator_op and_or,
		list -> and_or,
		and_or -> pipeline,
		and_or -> and_or AND_IF linebreak pipeline,
		and_or -> and_or OR_IF linebreak pipeline,
		pipeline -> pipe_sequence,
		pipeline -> Bang pipe_sequence,
		pipe_sequence -> command,
		pipe_sequence -> pipe_sequence | linebreak command,
		command -> simple_command,
		command -> compound_command,
		command -> compound_command redirect_list,
		command -> function_definition,
		compound_command -> brace_group,
		compound_command -> subshell,
		compound_command -> for_clause,
		compound_command -> case_clause,
		compound_command -> if_clause,
		compound_command -> while_clause,
		compound_command -> until_clause,
		subshell -> ( compound_list ),
		compound_list -> linebreak term,
		compound_list -> linebreak term separator,
		term -> term separator and_or,
		term -> and_or,
		for_clause -> For name do_group,
		for_clause -> For name sequential_sep do_group,
		for_clause -> For name linebreak in sequential_sep do_group,
		for_clause -> For name linebreak in wordlist sequential_sep do_group,
		name -> WORD,
		in -> In,
		wordlist -> wordlist WORD,
		wordlist -> WORD,
		case_clause -> Case WORD linebreak in linebreak case_list Esac,
		case_clause -> Case WORD linebreak in linebreak case_list_ns Esac,
		case_clause -> Case WORD linebreak in linebreak Esac,
		case_list_ns -> case_list case_item_ns,
		case_list_ns -> case_item_ns,
		case_list -> case_list case_item,
		case_list -> case_item,
		case_item_ns -> pattern ) linebreak,
		case_item_ns -> pattern ) compound_list,
		case_item_ns -> ( pattern ) linebreak,
		case_item_ns -> ( pattern ) compound_list,
		case_item -> pattern ) linebreak DSEMI linebreak,
		case_item -> pattern ) compound_list DSEMI linebreak,
		case_item -> ( pattern ) linebreak DSEMI linebreak,
		case_item -> ( pattern ) compound_list DSEMI linebreak,
		pattern -> WORD,
		pattern -> pattern | WORD,
		if_clause -> If compound_list Then compound_list else_part Fi,
		if_clause -> If compound_list Then compound_list Fi,
		else_part -> Elif compound_list Then compound_list,
		else_part -> Elif compound_list Then compound_list else_part,
		else_part -> Else compound_list,
		while_clause -> While compound_list do_group,
		until_clause -> Until compound_list do_group,
		function_definition -> fname ( ) linebreak function_body,
		function_body -> compound_command,
		function_body -> compound_command redirect_list,
		fname -> WORD,
		brace_group -> Lbrace compound_list Rbrace,
		do_group -> Do compound_list Done,
		simple_command -> cmd_prefix cmd_word cmd_suffix,
		simple_command -> cmd_prefix cmd_word,
		simple_command -> cmd_prefix,
		simple_command -> cmd_name cmd_suffix,
		simple_command -> cmd_name,
		cmd_name -> WORD,
		cmd_word -> WORD,
		cmd_prefix -> io_redirect,
		cmd_prefix -> cmd_prefix io_redirect,
		cmd_prefix -> ASSIGNMENT_WORD,
		cmd_prefix -> cmd_prefix ASSIGNMENT_WORD,
		cmd_suffix -> io_redirect,
		cmd_suffix -> cmd_suffix io_redirect,
		cmd_suffix -> WORD,
		cmd_suffix -> cmd_suffix WORD,
		redirect_list -> io_redirect,
		redirect_list -> redirect_list io_redirect,
		io_redirect -> io_file,
		io_redirect -> IO_NUMBER io_file,
		io_redirect -> io_here,
		io_redirect -> IO_NUMBER io_here,
		io_file -> < filename,
		io_file -> LESSAND filename,
		io_file -> > filename,
		io_file -> GREATAND filename,
		io_file -> DGREAT filename,
		io_file -> LESSGREAT filename,
		io_file -> CLOBBER filename,
		filename -> WORD,
		io_here -> DLESS here_end,
		io_here -> DLESSDASH here_end,
		here_end -> WORD,
		newline_list -> NEWLINE,
		newline_list -> newline_list NEWLINE,
		linebreak -> newline_list,
		linebreak ->,
		separator_op -> &,
		separator_op -> ;,
		separator -> separator_op linebreak,
		separator -> newline_list,
		sequential_sep -> ; linebreak,
		sequential_sep -> newline_list,
	};
