
#include "pressurer.hpp"

using namespace mod1;

Pressurer::Pressurer(const std::shared_ptr<PhysicItems> &physicItems) :
                                    PhysicLaw(),
                                    m_physicItems(physicItems)
{}

Pressurer::~Pressurer() {}

void Pressurer::bzeroVect(double (&vect)[GRID_WIDTH][GRID_HEIGHT]) {
	for (int i = 0 ; i < GRID_WIDTH; i++) {
		for (int j = 0 ; j < GRID_HEIGHT; j++) {
			vect[i][j] = 0;
		}
	}
}

/* Last step: One time we know pressure, we can update velocity for each cell of grid. */
void Pressurer::updateVelocity(void) {
    double scale = DT / DX;

	for (int i = 0 ; i < GRID_WIDTH; i++) {
		for (int j = 0 ; j < GRID_HEIGHT; j++) { //TODO: replace by if weight > 0
			if (i > 0 && (GRID[i][j].type == FLUID || GRID[i - 1][j].type == FLUID))
			{
				if (GRID[i][j].type == SOLID || GRID[i - 1][j].type == SOLID)
					GRID_U[i][j].val = 0;
				else
					GRID_U[i][j].val -= scale * (GRID[i][j].pressure - GRID[i - 1][j].pressure);
			}
			if (j > 0 && (GRID[i][j].type == FLUID || GRID[i][j - 1].type == FLUID))
			{
				if (GRID[i][j].type == SOLID || GRID[i][j - 1].type == SOLID)
					GRID_V[i][j].val = 0;
				else
					GRID_V[i][j].val -= scale * (GRID[i][j].pressure - GRID[i][j - 1].pressure);
			}
		}
	}
}
void Pressurer::calcA()
{
	double scale = DT / (DX * DX); // DENSITY = 1 ?
	for (int i = 0 ; i < GRID_WIDTH; i++) {
		for (int j = 0 ; j < GRID_HEIGHT; j++) {
			if (GRID[i][j].type == FLUID) {
				if (i > 0 && GRID[i - 1][j].type == FLUID) {
					A[i][j].diag += scale;
				}
				if (i < GRID_WIDTH && GRID[i + 1][j].type == FLUID) {
					A[i][j].diag += scale;
					A[i][j].plusi -= scale;
				}
				else if (i < GRID_WIDTH && GRID[i + 1][j].type == AIR) {
					A[i][j].diag += scale;
				}
				if (j > 0 && GRID[i][j - 1].type == FLUID) {
					A[i][j].diag += scale;
				}
				if (j < GRID_HEIGHT && GRID[i][j + 1].type == FLUID) {
					A[i][j].diag += scale;
					A[i][j].plusj -= scale;
				}
				else if (j < GRID_HEIGHT && GRID[i][j + 1].type == FLUID) {
					A[i][j].diag += scale;
				}
			}
		}
	}
}

void::Pressurer::calcPrecon()
{
	for(int i = 1; i < GRID_WIDTH; i++) {
		for(int j = 1; j < GRID_WIDTH; j++) {
			if (GRID[i][j].type == FLUID) {
				e = A[i][j].diag - (A[i - 1][j].plusi * precon[i-1][j] * A[i-1][j].plusi * precon[i-1][j]) -
					(A[i][j-1].plusj * precon[i][j-1] * A[i][j-1] * precon[i][j-1]) -
					tau * (A[i-1][j].plusi * A[i-1][j].plusj + 
							A[i][j-1].plusj *
							A[i][j-1].plusi)
					if (e < sigma * A[i][j].diag)
						e = A[i][j].diag;
				precon[i][j] = 1 / sqrt(e);
			}
		}
	}
}

void Pressurer::applyPrecon(double (&r)[GRID_WIDTH][GRID_HEIGHT])
{
	double t;
	/* first solve Lq = r */
	for(int i = 1; i < GRID_WIDTH; i++) {
		for(int j = 1; j < GRID_WIDTH; j++) {
			if (GRID[i][j].type == FLUID) {
				t = r[i][j] - A[i-1][j].plusi * precon[i-1][j]*q[i-1][j] // WARNING initialize q
					        - A[i][j-1].plusj * precon[i][j-1]*q[i][j-1];
				q[i][j] = t * precon[i][j];
			}
		}
	}
	for(int i = GRID_WIDTH - 1; i >= 0; i--) {
		for(int j = GRID_HEIGHT - 1; j >= 0; j--) {
			if (GRID[i][j].type == FLUID) {
				t = q[i][j] - A[i][j].plusi * precon[i][j]*z[i+1][j] // WARNING depasse grid_size
					        - A[i][j-1].plusj * precon[i][j]*z[i][j+1];
				z[i][j] = t * precon[i][j];
			}
		}
	}
}

/* perform A * s */

void Pressurer::ApplyA(double (&s)[GRID_WIDTH][GRID_HEIGHT], double (&res)[GRID_WIDTH][GRID_HEIGHT])
{
	double t;
	for (int i = 0 ; i < GRID_WIDTH; i++) {
		for (int j = 0 ; j < GRID_HEIGHT; j++) {
			if (GRID[i][j].type == FLUID) {
				t += A[i][j].diag * s[i][j];
				t += A[i][j].plusi * s[i+1][j];
				t += A[i][j].plusi * s[i-1][j];
				t += A[i][j].plusj * s[i][j+1];
				t += A[i][j].plusj * s[i][j-1];
				res[i][j] = t;
			}
		}
	}
}

/*
   • Setinitialguess p=0 
   andresidualvector r=b
   (Ifr=0then return p)
   • Set auxiliary vector z = applyPreconditioner(r), 
   and search vector s = z
   • σ = dotproduct(z, r)
   • Loop until done (or maximum iterations exceeded):
   • Set auxiliary vector z = applyA(s)
   • α = σ/dotproduct(z, s)
   • Update p←p + αs and r←r−αz 
   • If max |r| ≤ tol then return p
   • Set auxiliary vector z = applyPreconditioner(r) 
   • σnew = dotproduct(z, r)
   • β = σnew/σ
   • Setsearchvector s=z+βs
   • σ=σnew
   • Return p (and report iteration limit exceeded)
   */
/*
   void::Pressurer::PCG() {
   double sigma;
   double sigma_new;
   int i;
   double alpha;

   p = 0;
   r = b;
   z = applyPreconditioner(r);
   s = z;
   sigma = dotProduct(z, r);
   for (i = 0; i < 200; i++)
   {
   z = applyA(s);
   alpha = sigma / dotProduct(z, s);
   p += alpha * s;
   r -= alpha * z;
   if (normeMax(r) <= tol)
   return (p);
   z = applyPreconditioner(r);
   sigma_new = dotProduct(z, r);
   beta = sigma_new / sigma;
   s = z + beta * s;
   sigma = sigma_new;
   }
   if (i == 200) {
   std::cout << "Warning nb max iteration occur in PCG" :: << std::endl;
   }
   }
   */
/* calc b the right hand side of Ap = b */
void Pressurer::calcNegativeDivergence(void) {
	double scale = 1.0 / DX;

	/* init 0 */
	bzeroVect(b);
/*	for (int i = 0 ; i < GRID_WIDTH; i++) {
		for (int j = 0 ; j < GRID_HEIGHT; j++) {
			b[i][j] = 0;
		}
	}*/
	/* calculate negative divergence of velocity */
	for (int i = 0 ; i < GRID_WIDTH; i++) {
		for (int j = 0 ; j < GRID_HEIGHT; j++) {
			if (GRID[i][j].type == FLUID) {
				b[i][j] -= scale * (GRID_U[i + 1][j].val - GRID_U[i][j].val +
						GRID_V[i][j + 1].val - GRID_V[i][j].val);
			}
		}
	}
	/* handle boundary conditions */
	/* but we don't handle moving solids */
	double uSolid = 0;
	double vSolid = 0;
	for (int i = 0 ; i < GRID_WIDTH; i++) {
		for (int j = 0 ; j < GRID_HEIGHT; j++) {
			if (GRID[i][j].type == FLUID) {
				if (i > 0 && GRID[i - 1][j].type == SOLID) {
					b[i][j] -= scale * (GRID_U[i][j].val - uSolid);
				}
				if (i < GRID_WIDTH && GRID[i + 1][j].type == SOLID) {
					b[i][j] += scale * (GRID_U[i + 1][j].val - uSolid);
				}
				if (j > 0 && GRID[i][j - 1].type == SOLID) {
					b[i][j] -= scale * (GRID_V[i][j].val - vSolid);
				}
				if (j < GRID_HEIGHT && GRID[i][j + 1].type == SOLID) {
					b[i][j] += scale * (GRID_V[i][j + 1].val - vSolid);
				}
			}
		}
	}
}


void Pressurer::solvePressure(void) {

	calcA();
	calcNegativeDivergence();
	//	calcPrecon();
	//	PCG();
	updateVelocity();
	(void)A;
	(void)precon;
	(void)z;
	(void)s;
	(void)b;
	(void)p;
}
